(* Agent Based Macroeconomic Model Simulation Version 1.1 *)

(* Model output prints at bottom. To run a simulation press Cmd-A (or \
Ctrl-A on Windows) and hit Shift-Enter. Clear the kernel between runs \
of the simulation. *)

(* SET CONSTANTS *)

NumPeriods = 10;

Cash = 2600; (* Cash to single firm *)

InitialCapital = 0;
InitialLabor = 0;

NumFirms = 5;
NumHouseholds = 1000;
NumBanks = 1;

PriceCapital = 20;
PriceLabor = 16;

PriceGood = 8;

ReturnsCapital = 0.3;
ReturnsLabor = 0.7;

TechLevel = 10;

MPC = 1;(* Marginal Propensity to Consume *)

WageAdjustmentDelay = 
  2; (* Number of periods to wait before adjusting wage up or down *)

(* PROGRAM INITIALIZATION *)

(* Create Balance Sheets and funtions to print them *)

BalanceSheetBanks = ConstantArray[0, {NumBanks, 6}];
PrintBanks := 
  Grid[Prepend[
    BalanceSheetBanks, {"Label", "Cash", "Liabilities", "Equity", 
     "Expected Capital Inflow", "Capital Ratio"}]];

BalanceSheetFirms = ConstantArray[0, {NumFirms, 5}];
PrintFirms := 
  Grid[Prepend[
    BalanceSheetFirms, {"Label", "Cash", "Liabilities", "Equity", 
     "Inventory"}]];

BalanceSheetHouseholds = ConstantArray[0, {NumHouseholds, 8}];
PrintHouseholds := 
  Grid[Prepend[
    BalanceSheetHouseholds, {"Label", "Cash (Liquid)", 
     "Cash (Deposits)", "Equity", "Net Wealth", "Reservation Wage", 
     "Employed", "Cumulative Employment"}]];

(* Create Labels for the Balance Sheets *)
Do[
 BalanceSheetBanks[[i]][[1]] = i, {i, 1, NumBanks}]
Do[BalanceSheetFirms[[i]][[1]] = i, {i, 1, NumFirms}]
Do[BalanceSheetHouseholds[[i]][[1]] = i, {i, 1, NumHouseholds}]

(* Create array for production *)

ProductionMatrix = ConstantArray[0, {NumFirms, 12}];
PrintProduction := 
  Grid[Prepend[
    ProductionMatrix, {"Label", "Cash", "Current Capital", 
     "Current Labor", "Capital Target", "Labor Target", 
     "Revenue Target", "Cost Capital", "Cost Labor", "Profit", 
     "Rental Rate", "Salary"}]];

(* Set firm's initial cash in the Production Matrix *)

Do[BalanceSheetFirms[[i]][[2]] = Cash, {i, 1, NumFirms}];

(* Define functions for Cobb-Douglas production function *)

CostLabor[Labor_] := PriceLabor*Labor;
CostCapital[Capital_] := PriceCapital*Capital;
Revenue[Capital_, Labor_] := 
  TechLevel*PriceGood*(Capital^ReturnsCapital)*(Labor^ReturnsLabor);

Profits[Capital_, Labor_] := 
  Revenue[Capital, Labor] - CostCapital[Capital] - CostLabor[Labor];

(* Create an array to hold the Revenue from the Firm's sale of goods *)

RevenueMatrix = ConstantArray[0, {NumFirms, 5}];
PrintRevenue := 
  Grid[Prepend[
    RevenueMatrix, {"Label", "Cash", "Output", "Inventory", "Price"}]];

(* Create an array to hold the macroeconomic statistics *)

ModelOutputMatrix = ConstantArray[0, {NumPeriods, 7}];
PrintModelOutput := 
  Grid[Prepend[
    ModelOutputMatrix, {"Period", "Output", "Nominal GDP", 
     "Global Inventory", "Consumption", "Employment", 
     "Unemployment Rate"}]];

(* ECONOMIC PROCESSES *)

ProductionAllocation := Module[{OptimizationMatrix},
   
   (* Create labels *)
   
   Do[ProductionMatrix[[i]][[1]] = i, {i, 1, NumFirms}];
   
   (* Add the firm's cash to the production matrix *)
   
   Do[ProductionMatrix[[i]][[2]] = BalanceSheetFirms[[i]][[2]], {i, 1,
      NumFirms}];
   
   (* Solve CB optimization *)
   
   OptimizationMatrix = ConstantArray[0, NumFirms];
   Do[OptimizationMatrix[[i]] = 
     Maximize[{Profits[K, L], K >= 0, L >= 0, 
       CostCapital[K] + CostLabor[L] <= 
        ProductionMatrix[[i]][[2]]}, {K, L}], {i, 1, NumFirms}];
   
   (* Set initial capital, initial labor, capital target, 
   labor target *)
   Do[{
     ProductionMatrix[[i]][[3]] = InitialCapital;
     ProductionMatrix[[i]][[4]] = InitialLabor;
     ProductionMatrix[[i]][[5]] = 
      Floor[Last[Flatten[OptimizationMatrix[[i]]][[2]]]];
     ProductionMatrix[[i]][[6]] = 
      Floor[Last[Flatten[OptimizationMatrix[[i]]][[3]]]]; 
     }, {i, 1, NumFirms}];
   
   (* Calculate revenue, costs, profits*)
   Do[{
     ProductionMatrix[[i]][[7]] = 
      Revenue[ProductionMatrix[[i]][[5]], 
       ProductionMatrix[[i]][[6]]];
     ProductionMatrix[[i]][[8]] = 
      CostCapital[ProductionMatrix[[i]][[5]]];
     ProductionMatrix[[i]][[9]] = 
      CostLabor[ProductionMatrix[[i]][[6]]];
     ProductionMatrix[[i]][[10]] = 
      ProductionMatrix[[i]][[7]] - ProductionMatrix[[i]][[8]] - 
       ProductionMatrix[[i]][[9]];
     }, {i, 1, NumFirms}];
   
   (* Calculate rental rate of capital and salary offers *)
   Do[{
     ProductionMatrix[[i]][[11]] = 
      If[ ProductionMatrix[[i]][[5]] == 0, 0, 
       ProductionMatrix[[i]][[8]]/ProductionMatrix[[i]][[5]]];
     ProductionMatrix[[i]][[12]] = 
      If[ProductionMatrix[[i]][[6]] == 0, 0, 
       ProductionMatrix[[i]][[9]]/ProductionMatrix[[i]][[6]]];
     }, {i, 1, NumFirms}];
   
   {ProductionMatrix}];

PurchaseCapital := Do[
   {ProductionMatrix[[i]][[3]] = ProductionMatrix[[i]][[5]],
    BalanceSheetFirms[[i]][[2]] -= ProductionMatrix[[i]][[8]]}
   , {i, 1, NumFirms}];

LaborSearch := 
  Module[{EmploymentLevel, FirmOrdering, TempFirmBalanceSheet, 
    FirmLookup, i, j},
   
   (* Calculate reservation wages *)
   Do[
    BalanceSheetHouseholds[[i]][[6]] = PriceLabor;
    
    (* If unemployed for more periods than the delay, 
    then adjust the reservation wage down by a dollar *)
    
    If[BalanceSheetHouseholds[[i]][[8]] <= - WageAdjustmentDelay, 
     BalanceSheetHouseholds[[i]][[6]] -= -1];
    
    (* If employed for more periods than the delay, 
    then adjust the reservation wage up by a dollar *)
    
    If[BalanceSheetHouseholds[[i]][[8]] >= WageAdjustmentDelay, 
     BalanceSheetHouseholds[[i]][[6]] += 1];
    
    , {i, 1, NumHouseholds}];
   
   (* Calculate the number of open positions and instantiate a matrix \
to represent those jobs *)
   
   EmploymentLevel = 
    Min[Sum[ProductionMatrix[[i]][[6]], {i, 1, NumFirms}], 
     NumHouseholds];
   
   (* Sort firm's salary offers and household reservation wages: 
   low to high *)
   
   ProductionMatrix = SortBy[ProductionMatrix, #[[12]] &];
   BalanceSheetHouseholds = SortBy[BalanceSheetHouseholds, #[[6]] &];
   
   (* Ordering the firms is a little more tricky *)
   
   FirmOrdering = ConstantArray[0, NumFirms]; (* Create array *)
   
   Do[FirmOrdering[[i]] = ProductionMatrix[[i]][[1]], {i, 1, 
     NumFirms}]; (* Populate array *)
   
   TempFirmBalanceSheet = ConstantArray[0, NumFirms];
   (* Match the ordering of the firms in the balance sheet with the \
ordering of the firms in the production matrix *)
   
   For[i = 1, i <= NumFirms, i++,
    FirmLookup = FirmOrdering[[i]];
    For[j = 1, j <= NumFirms, j++,
     If[BalanceSheetFirms[[j]][[1]] == FirmLookup,
      TempFirmBalanceSheet[[i]] = BalanceSheetFirms[[j]]; Break[]]
     ]
    ];
   BalanceSheetFirms = TempFirmBalanceSheet;
   
   (*BalanceSheetFirms = BalanceSheetFirms[[ Ordering @ 
   FirmOrdering]];*)
   
   (* Hire Labor *)
   i = 1;
   j = 1;
   While[i <= EmploymentLevel,
    
    If[(BalanceSheetHouseholds[[i]][[6]] <= 
        ProductionMatrix[[j]][[12]]) && (ProductionMatrix[[j]][[
         2]] >= ProductionMatrix[[j]][[
         12]]) && (ProductionMatrix[[j]][[4]] < 
        ProductionMatrix[[j]][[6]]), (* If Salary Offer > 
     Reservation Wage & Firm has cash on hand to pay the wage, & the \
firm hasn't met it's labor target *)
     
     BalanceSheetHouseholds[[i]][[2]] += 
      ProductionMatrix[[j]][[12]]; (* 
     Add cash to household based off cost of labor *)
     
     BalanceSheetFirms[[j]][[2]] -= ProductionMatrix[[j]][[12]];(* 
     Subtract cash from firm *)
     ProductionMatrix[[j]][[4]] += 1;(* 
     Add unit of labor to firm *)
     
     BalanceSheetHouseholds[[i]][[7]] = 1;(* 
     Update employment status *)
     
     If[BalanceSheetHouseholds[[i]][[8]] < 0, 
      BalanceSheetHouseholds[[i]][[8]] = 1, 
      BalanceSheetHouseholds[[i]][[8]] += 1]; (* Update cumulative *)

          j = 1;
     i += 1; (* Go to next house *)
     ,
     j += 1; (* If not, 
     households search for the next highest salary offer *)
     
     If[j > NumFirms, j = 1; i += 1]  (* 
     If checked all firms then go to next house *)
     ] 
    ];
   
   (* If not employed set the cumulative employment to -1 *)
   Do[
    If[BalanceSheetHouseholds[[i]][[7]] == 0,
     
     If[BalanceSheetHouseholds[[i]][[8]] > 0,
      BalanceSheetHouseholds[[i]][[8]] = -1,
      BalanceSheetHouseholds[[i]][[8]] -= 1]],
    
    {i, 1, NumHouseholds}];
   
   (* Resort by label *)
   
   ProductionMatrix = SortBy[ProductionMatrix, #1[[1]] &];
   BalanceSheetHouseholds = 
    SortBy[BalanceSheetHouseholds, #1[[1]] &];
   BalanceSheetFirms = SortBy[BalanceSheetFirms, #[[1]] &];
   
   {BalanceSheetHouseholds, ProductionMatrix}];

(* Carry out Production *)
FirmsProduce := Do[
  RevenueMatrix[[i]][[1]] = i; (* Create Labels *)
  
  RevenueMatrix[[i]][[
    3]] = (Floor[
     TechLevel*(ProductionMatrix[[i]][[3]]^
        ReturnsCapital)*(ProductionMatrix[[i]][[4]]^ReturnsLabor)]);
  RevenueMatrix[[i]][[4]] += RevenueMatrix[[i]][[3]];
  , {i, 1, NumFirms}]

ConsumptionMarket := Module[{CashDeposits, i, j},
   
   (* Calculate the Consumer's Budgets - Households deposit (1-
   MPC) in the Bank *)
   Do[
    BalanceSheetHouseholds[[i]][[3]] += (1 - MPC)*
      BalanceSheetHouseholds[[i]][[2]];
    BalanceSheetHouseholds[[i]][[2]] -= 
     BalanceSheetHouseholds[[i]][[3]], {i, 1, NumHouseholds}];
   
   CashDeposits = Total[BalanceSheetHouseholds][[3]];
   BalanceSheetBanks[[1]][[2]] += CashDeposits;(* 
   Increase bank's cash *)
   
   BalanceSheetBanks[[1]][[3]] += CashDeposits; (* 
   And bank's liabilities *)
   
   (* Compute the Price that a Firm charges *)
   
   Do[RevenueMatrix[[i]][[5]] = PriceGood, {i, 1, NumFirms}];
   
   (* Rank firms by cheapest to most expensive *)
   
   RevenueMatrix = SortBy[RevenueMatrix, #1[[5]] &];
   
   i = 1;
   j = 1;
   While[i < NumHouseholds,
    
    If[(BalanceSheetHouseholds[[i]][[2]] >= 
        RevenueMatrix[[j]][[5]]) && (RevenueMatrix[[j]][[4]] > 0), (* 
     If Cash on Hand > 
     Price of the Good & Inventories are greater than zero *)
     
     {BalanceSheetHouseholds[[i]][[2]] -= RevenueMatrix[[j]][[5]], (* 
      Subtract cash to household *)
      
      RevenueMatrix[[j]][[2]] += RevenueMatrix[[j]][[5]] ,(* 
      Add cash to firm *)
      RevenueMatrix[[j]][[4]] -= 1}];
    
    (* If firm's inventory equals zero, go to next firm *)
    
    If[RevenueMatrix[[j]][[4]] == 0,
     j += 1];
    
    (* If house can't afford to buy more, go to next house *)
    
    If[BalanceSheetHouseholds[[i]][[2]] < RevenueMatrix[[j]][[5]],
     j = 1;
     i += 1;];
    
    ];
   
   (* Resort Firms by Label *)
   
   RevenueMatrix = SortBy[RevenueMatrix, #1[[1]] &];
   
   {BalanceSheetHouseholds, RevenueMatrix}];

Bookkeeping := Module[{RevenueSummary, Employment},
   
   (* Push Firm's Cash and Inventory to their Balance Sheet for the \
next period *)
   Do[
    BalanceSheetFirms[[i]][[2]] += RevenueMatrix[[i]][[2]];
    BalanceSheetFirms[[i]][[5]] += RevenueMatrix[[i]][[4]];,
    {i, 1, NumFirms}];
   
   RevenueSummary = Total[RevenueMatrix];
   Employment = Total[ProductionMatrix][[4]];
   
   (* Calculate output, nominal gdp, inventories, 
   and consumption summed across all firms *)
   
   ModelOutputMatrix[[CurrentPeriod]][[1]] = CurrentPeriod;
   ModelOutputMatrix[[CurrentPeriod]][[2]]  = RevenueSummary[[3]];
   ModelOutputMatrix[[CurrentPeriod]][[3]]  = 
    RevenueSummary[[3]]*PriceGood;
   ModelOutputMatrix[[CurrentPeriod]][[4]]  = RevenueSummary[[4]];
   ModelOutputMatrix[[CurrentPeriod]][[5]]  = 
    ModelOutputMatrix[[CurrentPeriod]][[2]] - 
     ModelOutputMatrix[[CurrentPeriod]][[4]];
   ModelOutputMatrix[[CurrentPeriod]][[6]] = Employment;
   ModelOutputMatrix[[CurrentPeriod]][[7]] = 
    N[(NumHouseholds - Employment)/NumHouseholds];
   
   (* Reset per-period matrices *)
   
   ProductionMatrix = ConstantArray[0, {NumFirms, 12}];
   RevenueMatrix = ConstantArray[0, {NumFirms, 5}];
   
   (* Reset employment status *)
   
   Do[BalanceSheetHouseholds[[i]][[7]] = 0, {i, 1, NumHouseholds}]
    
    {BalanceSheetFirms, ModelOutputMatrix}];

(* Run the Economy *)
(*CurrentPeriod = 1;
ProductionAllocation;
PurchaseCapital;
LaborSearch;
FirmsProduce;
ConsumptionMarket;*)

(*Bookkeeping;*)

(*PrintBanks
PrintFirms
PrintRevenue
PrintProduction
PrintModelOutput
PrintHouseholds*)

Do[
  CurrentPeriod = k;
  ProductionAllocation;
  PurchaseCapital;
  LaborSearch;
  FirmsProduce;
  ConsumptionMarket;
  Bookkeeping;,
  {k, 1, NumPeriods}];

PrintModelOutput
